<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="Translate Toolkit" creationtoolversion="2.5.0" segtype="sentence" o-tmf="UTF-8" adminlang="en" srclang="en" datatype="PlainText"/>
  <body>
    <tu>
      <tuv xml:lang="en">
        <seg>|LS| Queries</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>|LS| 検索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>:kbd:`SELECT ...` コマンドを書くとき、これは一般的にはクエリと言われますが、 情報のデータベースに問い合わせしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**The goal of this lesson:** To learn how to create queries that will return useful information.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>**このレッスンの目的：** 有用な情報を返すクエリを作成する方法を学習します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you did not do so in the previous lesson, add the following people objects to your :kbd:`people` table.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>前のレッスンでそうしなかった場合は、以下の人々オブジェクトを :kbd:`people` テーブルに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you receive any errors related to foreign key constraints, you will need to add the 'Main Road' object to your streets table first</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>外部キー制約に関連した何らかのエラーを受け取る場合は、まず街のテーブルに「主要道路」オブジェクトを追加する必要があります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ordering Results</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>結果を並べ替える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's retrieve a list of people ordered by their house numbers:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>自分の家の番号順に並べられた人々のリストを検索してみましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Result:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>結果:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can sort the results by the values of more than one column:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>結果の並べ替えは複数の列の値によってもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Filtering</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>フィルタリング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>だいたいはデータベース内のすべてのレコード一つ一つを見たいとは思わないでしょう。特に何千ものレコードがあり、1つか2つを見たいだけの場合は 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here is an example of a numerical filter which only returns objects whose ``house_no`` is less than 50:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>これは :kbd:`house_no` が50未満であるオブジェクトのみを返す数値フィルタの例です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can combine filters (defined using the ``WHERE`` clause) with sorting (defined using the ``ORDER BY`` clause):</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>フィルタ（ ``WHERE`` 句を使用して定義される）はソート（ ``ORDER BY`` 句を使用して定義される）と組み合わせることができます::</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also filter based on text data:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>テキストデータに基づいてもフィルタできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`s` in them.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>ここでは、 :kbd:`LIKE` 句を使用し、 :kbd:`s` を持つすべての名前を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You'll notice that this query is case-sensitive, so the :kbd:`Sally Norman` entry has not been returned.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>このクエリは大文字小文字が区別されることに気づくでしょう、だから :kbd:`Sally Norman` エントリは返されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to search for a string of letters regardless of case, you can do a case in-sensitive search using the :kbd:`ILIKE` clause:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>大文字小文字関係なく文字列を検索したい場合は、 :kbd:`ILIKE` 句を使用すれば大文字小文字を無視した検索ができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>That query returned every **people** object with an :kbd:`r` or :kbd:`R` in their name.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>そのクエリは、:kbd:`r` か :kbd:`R` を自分の名前に持つ `people` オブジェクト すべてを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Joins</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What if you want to see the person's details and their street's name instead of the ID?</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>IDの代わりに人の詳細とその通りの名前を確認したい場合は？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In order to do that, you need to join the two tables together in a single query.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>そのためには、単一のクエリ中で2つのテーブルを結合する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Lets look at an example:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>例を見てみましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With joins, you will always state the two tables the information is coming from, in this case people and streets.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>結合によって、情報が由来する2つのテーブルを、この場合は人と通りですが、常に宣言することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You also need to specify which two keys must match (foreign key &amp; primary key).</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>また、どの2つのキー（外部キー＆主キー）が一致しなければならないかを指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>それを指定しない場合は、人と街のすべての可能な組み合わせの一覧が得られますが、誰が実際にその通りに住んでいるか知るすべはありません！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here is what the correct output will look like:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>正しい出力はこのように見えるでしょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We will revisit joins as we create more complex queries later.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>結合については、後でより複雑なクエリを作成するときに再訪します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Just remember they provide a simple way to combine the information from two or more tables.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>それらは二つ以上のテーブルからの情報を組合わせるための簡単な方法を提供するとだけ覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sub-Select</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>副選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sub-selections allow you to select objects from one table based on the data from another table which is linked via a foreign key relationship.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>副選択は外部キー関係を介して連結されている別のテーブルからのデータに基づいて一つのテーブルからオブジェクトを選択できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In our case, we want to find people who live on a specific street.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>この場合は特定の街路に住む人々を見つけたいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, let's do a little tweaking of our data:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>まず、データをわずかに微調整しましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's take a quick look at our data after those changes: we can reuse our query from the previous section:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>それらの変更の後でデータを簡単に見てみましょう：前のセクションのクエリを再利用できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now let's show you a sub-selection on this data.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>それでは、このデータの副選択を表示してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We want to show only people who live in ``street_id`` number :kbd:`1`:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>``street_id`` 番号 :kbd:`1` に住む人だけを表示したい:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Although this is a very simple example and unnecessary with our small data-sets, it illustrates how useful and important sub-selections can be when querying large and complex data-sets.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>これは非常に単純な例でありこの小さなデータセットでは不要ですが、大規模かつ複雑なデータセットを照会する際に有用かつ重要な副選択をする方法を示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Aggregate Queries</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>クエリの集約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>One of the powerful features of a database is its ability to summarise the data in its tables.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>データベースの強力な機能の1つは、そのテーブル内のデータを要約する能力です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These summaries are called aggregate queries.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>これらの要約は集計クエリと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here is a typical example which tells us how many people objects are in our people table:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>これは、人々オブジェクトが人々テーブルに何人いるかを教えてくれる代表的な例です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If we want the counts to be summarised by street name we can do this:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>人数を街路名で要約したい場合は、こうすることができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Because we have not used an :kbd:`ORDER BY` clause, the order of your results may not match what is shown here.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>:kbd:`ORDER BY` 句を使用しなかったため、検索結果の順序はここに示したものとは一致しない場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>|TY| |moderate|</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>|TY| |moderate|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Summarise the people by street name and show the actual street names instead of the street_ids.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>通りの名前で人を要約し、street_idsの代わりに実際の通りの名前を表示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>:ref:`Check your results &lt;database-concepts-8&gt;`</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>:ref:`結果を確認します &lt;database-concepts-8&gt;`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>|IC|</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>|IC|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>クエリを使用して、データベース内の有用な情報を抽出できるような形でデータを返す方法を見てきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>|WN|</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>|WN|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Next you'll see how to create views from the queries that you've written.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>次は今書いたクエリからビューを作成する方法について説明します。</seg>
      </tuv>
    </tu>
  </body>
</tmx>
