# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-19 13:16+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/developers_guide/unittesting.rst:6
msgid "Unit Testing"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:11
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement "
"to qgis_core, and we will extend this requirement to other parts of the "
"code base once people are familiar with the procedures for unit testing "
"explained in the sections that follow."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:19
msgid "The QGIS testing framework - an overview"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:21
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt "
"testing library) and CTest (a framework for compiling and running tests "
"as part of the CMake build process). Lets take an overview of the process"
" before we delve into the details:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:26
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written "
"yet when you start building your tests, and then as you implement your "
"code you can immediately validate each new functional part you add with "
"your test. In practice you will probably need to write tests for pre-"
"existing code in QGIS since we are starting with a testing framework well"
" after much application logic has already been implemented."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:34
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically "
"a client that creates an instance of a class and calls some methods on "
"that class. It will check the return from each method to make sure it "
"matches the expected value. If any one of the calls fails, the unit will "
"fail."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:40
msgid ""
"You include QtTestLib macros in your test class. This macro is processed "
"by the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:44
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will"
" build your test."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:47
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. "
"This will ensure your tests actually get compiled when you type make."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:50
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if "
"your test is data driven (e.g. needs to load a shapefile). These test "
"data should be as small as possible and wherever possible you should use "
"the existing datasets already there. Your tests should never modify this "
"data in situ, but rather make a temporary copy somewhere if needed."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:56
msgid ""
"You compile your sources and install. Do this using normal ``make && "
"(sudo)  make install`` procedure."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:59
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though we will explain other approaches "
"that offer more fine grained control over running tests."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:64
msgid ""
"Right with that overview in mind, we will delve into a bit of detail. "
"We've already done much of the configuration for you in CMake and other "
"places in the source tree so all you need to do are the easy bits - "
"writing unit tests!"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:70
msgid "Creating a unit test"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:72
msgid ""
"Creating a unit test is easy - typically you will do this by just "
"creating a single :file:`.cpp` file (no :file:`.h` file is used) and "
"implement all your test methods as public methods that return void. We'll"
" use a simple test class for ``QgsRasterLayer`` throughout the section "
"that follows to illustrate. By convention we will name our test with the "
"same name as the class they are testing but prefixed with 'Test'. So our "
"test implementation goes in a file called :file:`testqgsrasterlayer.cpp` "
"and the class itself will be ``TestQgsRasterLayer``. First we add our "
"standard copyright banner:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:98
msgid ""
"Next we start our includes needed for the tests we plan to run. There is "
"one special include all tests should have:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:105
msgid ""
"Beyond that you just continue implementing your class as per normal, "
"pulling in whatever headers you may need:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:123
msgid ""
"Since we are combining both class declaration and implementation in a "
"single file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in"
" the generated Doxygen documentation. After that comes a short "
"description of the unit test and the class must inherit from QObject and "
"include the Q_OBJECT macro."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:140
msgid ""
"All our test methods are implemented as private slots. The QtTest "
"framework will sequentially call each private slot method in the test "
"class. There are four 'special' methods which if implemented will be "
"called at the start of the unit test (``initTestCase``), at the end of "
"the unit test (``cleanupTestCase``). Before each test method is called, "
"the ``init()`` method will be called and after each test method is called"
" the ``cleanup()`` method is called. These methods are handy in that they"
" allow you to allocate and cleanup resources prior to running each test, "
"and the test unit as a whole."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:161
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. "
"We are implementing two methods here which illustrate two types of "
"testing."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:165
msgid ""
"In the first case we want to generally test if the various parts of the "
"class are working, We can use a functional testing approach. Once again, "
"extreme programmers would advocate writing these tests before "
"implementing the class. Then as you work your way through your class "
"implementation you iteratively run your unit tests. More and more test "
"functions should complete successfully as your class implementation work "
"progresses, and when the whole unit test passes, your new class is done "
"and is now complete with a repeatable way to validate it."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:173
msgid ""
"Typically your unit tests would only cover the public API of your class, "
"and normally you do not need to write tests for accessors and mutators. "
"If it should happen that an accessor or mutator is not working as "
"expected you would normally implement a :ref:`regression test "
"<regression_test>` to check for this."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:193
msgid "Implementing a regression test"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:195
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:198
msgid ""
"We received a report by email that the cell count by rasters was off by "
"1, throwing off all the statistics for the raster bands."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:200
msgid ""
"We opened a bug report (`ticket #832 "
"<https://issues.qgis.org/issues/832>`_)"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:201
msgid ""
"We created a regression test that replicated the bug using a small test "
"dataset (a 10x10 raster)."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:203
msgid ""
"We ran the test, verifying that it did indeed fail (the cell count was 99"
" instead of 100)."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:205
msgid ""
"Then we went to fix the bug and reran the unit test and the regression "
"test passed. We committed the regression test along with the bug fix. Now"
" if anybody breakes this in the source code again in the future, we can "
"immediately identify that the code has regressed."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:210
msgid ""
"Better yet, before committing any changes in the future, running our "
"tests will ensure our changes don't have unexpected side effects - like "
"breaking existing functionality."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:214
msgid ""
"There is one more benefit to regression tests - they can save you time. "
"If you ever fixed a bug that involved making changes to the source, and "
"then running the application and performing a series of convoluted steps "
"to replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:221
msgid ""
"To implement your regression test, you should follow the naming "
"convention of **regression<TicketID>** for your test functions. If no "
"ticket exists for the regression, you should create one first. Using this"
" approach allows the person running a failed regression test easily go "
"and find out more information."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:240
msgid ""
"Finally in your test class declaration you can declare privately any data"
" members and helper methods your unit test may need. In our case we will "
"declare a ``QgsRasterLayer *`` which can be used by any of our test "
"methods. The raster layer will be created in the ``initTestCase()`` "
"function which is run before any other tests, and then destroyed using "
"``cleanupTestCase()`` which is run after all tests. By declaring helper "
"methods (which may be called by various test functions) privately, you "
"can ensure that they won't be automatically run by the QTest executable "
"that is created when we compile our test."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:257
msgid ""
"That ends our class declaration. The implementation is simply inlined in "
"the same file lower down. First our init and cleanup functions:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:290
msgid "The above init function illustrates a couple of interesting things."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:292
msgid ""
"We needed to manually set the QGIS application data path so that "
"resources such as :file:`srs.db` can be found properly."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:294
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the :file:`tenbytenraster.asc` file. This was achieved"
" by using the compiler define ``TEST_DATA_PATH``. The define is created "
"in the ``CMakeLists.txt`` configuration file under :file:`<QGIS Source "
"Root>/tests/CMakeLists.txt` and is available to all QGIS unit tests. If "
"you need test data for your test, commit it under :file:`<QGIS Source "
"Root>/tests/testdata`. You should only commit very small datasets here. "
"If your test needs to modify the test data, it should make a copy of it "
"first."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:304
msgid ""
"Qt also provides some other interesting mechanisms for data driven "
"testing, so if you are interested to know more on the topic, consult the "
"Qt documentation."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:308
msgid ""
"Next lets look at our functional test. The ``isValid()`` test simply "
"checks the raster layer was correctly loaded in the initTestCase. QVERIFY"
" is a Qt macro that you can use to evaluate a test condition. There are a"
" few other use macros Qt provide for use in your tests including:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:313
msgid "QCOMPARE ( *actual, expected* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:314
msgid "QEXPECT_FAIL ( *dataIndex, comment, mode* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:315
msgid "QFAIL ( *message* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:316
msgid "QFETCH ( *type, name* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:317
msgid "QSKIP ( *description, mode* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:318
msgid "QTEST ( *actual, testElement* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:319
msgid "QTEST_APPLESS_MAIN ( *TestClass* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:320
msgid "QTEST_MAIN ( *TestClass* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:321
msgid "QTEST_NOOP_MAIN ()"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:322
msgid "QVERIFY2 ( *condition, message* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:323
msgid "QVERIFY ( *condition* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:324
msgid "QWARN ( *message* )"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:326
msgid ""
"Some of these macros are useful only when using the Qt framework for data"
" driven testing (see the Qt docs for more detail)."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:336
msgid ""
"Normally your functional tests would cover all the range of functionality"
" of your classes public API where feasible. With our functional tests out"
" the way, we can look at our regression test example."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:340
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test"
" is simply a matter of using QVERIFY to check that the cell count meets "
"the expected value:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:355
msgid ""
"With all the unit test functions implemented, there's one final thing we "
"need to add to our test class:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:363
msgid ""
"The purpose of these two lines is to signal to Qt's moc that this is a "
"QtTest (it will generate a main method that in turn calls each test "
"function. The last line is the include for the MOC generated sources. You"
" should replace ``testqgsrasterlayer`` with the name of your class in "
"lower case."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:369
msgid "Comparing images for rendering tests"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:371
msgid ""
"Rendering images on different environments can produce subtle differences"
" due to platform-specific implementations (e.g. different font rendering "
"and antialiasing algorithms), to the fonts available on the system and "
"for other obscure reasons."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:375
msgid ""
"When a rendering test runs on Travis and fails, look for the dash link at"
" the very bottom of the Travis log. This link will take you to a cdash "
"page where you can see the rendered vs expected images, along with a "
"\"difference\" image which highlights in red any pixels which did not "
"match the reference image."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:380
msgid ""
"The QGIS unit test system has support for adding \"mask\" images, which "
"are used to indicate when a rendered image may differ from the reference "
"image. A mask image is an image (with the same name as the reference "
"image, but including a **_mask.png** suffix), and should be the same "
"dimensions as the reference image. In a mask image the pixel values "
"indicate how much that individual pixel can differ from the reference "
"image, so a black pixel indicates that the pixel in the rendered image "
"must exactly match the same pixel in the reference image. A pixel with "
"RGB 2, 2, 2 means that the rendered image can vary by up to 2 in its RGB "
"values from the reference image, and a fully white pixel (255, 255, 255) "
"means that the pixel is effectively ignored when comparing the expected "
"and rendered images."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:392
msgid ""
"A utility script to generate mask images is available as "
"``scripts/generate_test_mask_image.py``. This script is used by passing "
"it the path of a reference image (e.g. "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``)"
" and the path to your rendered image."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:397
msgid "E.g."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:403
msgid ""
"You can shortcut the path to the reference image by passing a partial "
"part of the test name instead, e.g."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:410
msgid ""
"(This shortcut only works if a single matching reference image is found. "
"If multiple matches are found you will need to provide the full path to "
"the reference image.)"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:414
msgid ""
"The script also accepts http urls for the rendered image, so you can "
"directly copy a rendered image url from the cdash results page and pass "
"it to the script."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:417
msgid ""
"Be careful when generating mask images - you should always view the "
"generated mask image and review any white areas in the image. Since these"
" pixels are ignored, make sure that these white images do not cover any "
"important portions of the reference image -- otherwise your unit test "
"will be meaningless!"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:422
msgid ""
"Similarly, you can manually \"white out\" portions of the mask if you "
"deliberately want to exclude them from the test. This can be useful e.g. "
"for tests which mix symbol and text rendering (such as legend tests), "
"where the unit test is not designed to test the rendered text and you "
"don't want the test to be subject to cross-platform text rendering "
"differences."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:428
msgid ""
"To compare images in QGIS unit tests you should use the class "
"``QgsMultiRenderChecker`` or one of its subclasses."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:431
msgid "To improve tests robustness here are few tips:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:433
msgid ""
"Disable antialiasing if you can, as this minimizes cross-platform "
"rendering differences."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:435
msgid ""
"Make sure your reference images are \"chunky\"... i.e. don't have 1 px "
"wide lines or other fine features, and use large, bold fonts (14 points "
"or more is recommended)."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:438
msgid ""
"Sometimes tests generate slightly different sized images (e.g. legend "
"rendering tests, where the image size is dependent on font rendering size"
" - which is subject to cross-platform differences). To account for this, "
"use ``QgsMultiRenderChecker::setSizeTolerance()`` and specify the maximum"
" number of pixels that the rendered image width and height differ from "
"the reference image."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:444
msgid ""
"Don't use transparent backgrounds in reference images (CDash does not "
"support them). Instead, use ``QgsMultiRenderChecker::drawBackground()`` "
"to draw a checkboard pattern for the reference image background."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:447
msgid ""
"When fonts are required, use the font specified in "
"``QgsFontUtils::standardTestFontFamily()`` (\"QGIS Vera Sans\")."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:450
msgid ""
"If travis reports errors for new images (for instance due to antialiasing"
" or font differences), the script :source:`parse_dash_results.py "
"<scripts/parse_dash_results.py>` can help you when you are updating the "
"local test masks."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:456
msgid "Adding your unit test to CMakeLists.txt"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:459
msgid ""
"Adding your unit test to the build system is simply a matter of editing "
"the :file:`CMakeLists.txt` in the test directory, cloning one of the "
"existing test blocks, and then replacing your test class name into it. "
"For example:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:470
msgid "The ADD_QGIS_TEST macro explained"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:472
msgid ""
"We'll run through these lines briefly to explain what they do, but if you"
" are not interested, just do the step explained in the above section."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:507
msgid ""
"Let's look a little more in detail at the individual lines. First we "
"define the list of sources for our test. Since we have only one source "
"file (following the methodology described above where class declaration "
"and definition are in the same file) its a simple statement:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:516
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:525
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation we included the moc outputs directly into our test class, "
"so that will give it (among other things) a main method so the class can "
"be compiled as an executable:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:536
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but we "
"will be working to replace that with the specific Qt libraries that each "
"class needs only. Of course you also need to link to the relevant qgis "
"libraries as required by your unit test."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:546
msgid ""
"Next we tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something we plan to remove in the future so "
"that the tests can run directly from inside the source tree."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:573
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / "
"ctest. Here is where the best magic happens - we register the class with "
"ctest. If you recall in the overview we gave in the beginning of this "
"section, we are using both QtTest and CTest together. To recap, QtTest "
"adds a main method to your test unit and handles calling your test "
"methods within the class. It also provides some macros like ``QVERIFY`` "
"that you can use as to test for failure of the tests using conditions. "
"The output from a QtTest unit test is an executable which you can run "
"from the command line. However when you have a suite of tests and you "
"want to run each executable in turn, and better yet integrate running "
"tests into the build process, the CTest is what we use."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:586
msgid "Building your unit test"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:588
msgid ""
"To build the unit test you need only to make sure that "
"``ENABLE_TESTS=true`` in the cmake configuration. There are two ways to "
"do this:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:591
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively"
" set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:593
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:595
msgid ""
"Other than that, just build QGIS as per normal and the tests should build"
" too."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:599
msgid "Run your tests"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:602
msgid "The simplest way to run the tests is as part of your normal build process:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:608
msgid ""
"The ``make test`` command will invoke CTest which will run each test that"
" was registered using the ADD_TEST CMake directive described above. "
"Typical output from ``make test`` will look like this:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:628
msgid ""
"If a test fails, you can use the ctest command to examine more closely "
"why it failed. Use the ``-R`` option to specify a regex for which tests "
"you want to run and ``-V`` to get verbose output:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:673
msgid "Running individual tests"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:675
msgid ""
"C++ tests are ordinary applications. You can run them from the build "
"folder like any executable."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:691
msgid ""
"These tests also take `command line arguments <https://doc-"
"snapshots.qt.io/qt5-5.9/qtest-overview.html#qt-test-command-line-"
"arguments>`_. This makes it possible to run a specific subset of tests:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:707
msgid "Debugging unit tests"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:710
msgid "C++ Tests"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:712
msgid ""
"For C++ unit tests, QtCreator automatically adds run targets, so you can "
"start them from the debugger."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:715
msgid ""
"If you go to *Projects* and there to the *Build & Run* --> Desktop *Run* "
"tab, you can also specify command line parameters that will allow a "
"subset of the tests to be run inside a .cpp file in the debugger."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:720
msgid "Python Tests"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:722
msgid ""
"It's also possible to start Python unit tests from QtCreator with GDB. "
"For this, you need to go to :guilabel:`Projects` and choose "
":guilabel:`Run` under :guilabel:`Build & Run`. Then add a new ``Run "
"configuration`` with the executable ``/usr/bin/python3`` and the Command "
"line arguments set to the path of the unit test python file, e.g. "
":file:`/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattributeformeditorwidget.py`."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:730
msgid "Now also change the ``Run Environment`` and add 3 new variables:"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:733
msgid "Variable"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:733
msgid "Value"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:735
msgid "PYTHONPATH"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:735
msgid "[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:737
msgid "QGIS_PREFIX_PATH"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:737
msgid "[build]/output"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:739
msgid "LD_LIBRARY_PATH"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:739
msgid "[build]/output/lib"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:742
msgid ""
"Replace ``[build]`` with your build directory and ``[source]`` with your "
"source directory."
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:746
msgid "Have fun"
msgstr ""

#: ../../docs/developers_guide/unittesting.rst:748
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope "
"you will get into the habit of writing test to test new functionality and"
" to check for regressions. Some aspects of the test system (in particular"
" the :file:`CMakeLists.txt` parts) are still being worked on so that the "
"testing framework works in a truly platform independent way."
msgstr ""

