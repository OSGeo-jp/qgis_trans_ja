# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation testing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-29 18:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/training_manual/database_concepts/db_intro.rst:2
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:4
msgid ""
"Before using PostgreSQL, let's make sure of our ground by covering "
"general database theory. You will not need to enter any of the example "
"code; it's only there for illustration purposes."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:8
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:11
msgid "What is a Database?"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:13
msgid ""
"A database consists of an organized collection of data for one or more "
"uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:18
msgid ""
"A database management system (DBMS) consists of software that operates "
"databases, providing storage, access, security, backup and other "
"facilities. *- Wikipedia*"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:23
msgid "Tables"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:25
msgid ""
"In relational databases and flat file databases, a table is a set of data"
" elements (values) that is organized using a model of vertical columns "
"(which are identified by their name) and horizontal rows. A table has a "
"specified number of columns, but can have any number of rows. Each row is"
" identified by the values appearing in a particular column subset which "
"has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:40
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:43
msgid "Columns / Fields"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:45
msgid ""
"A column is a set of data values of a particular simple type, one for "
"each row of the table. The columns provide the structure according to "
"which the rows are composed. The term field is often used interchangeably"
" with column, although many consider it more correct to use field (or "
"field value) to refer specifically to the single item that exists at the "
"intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:52
msgid "A column:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:61
msgid "A field:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:68
msgid "Records"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:70
msgid ""
"A record is the information stored in a table row. Each record will have "
"a field for each of the columns in the table."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:78
msgid "Datatypes"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:80
msgid ""
"Datatypes restrict the kind of information that can be stored in a "
"column. *- Tim and Horst*"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:83
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:85
msgid "``String`` - to store free-form text data"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:86
msgid "``Integer`` - to store whole numbers"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:87
msgid "``Real`` - to store decimal numbers"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:88
msgid "``Date`` - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:89
msgid "``Boolean`` - to store simple true/false values"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:91
msgid ""
"You can tell the database to allow you to also store nothing in a field. "
"If there is nothing in a field, then the field content is referred to as "
"a **'null' value**:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:101
msgid "Result:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:112
msgid ""
"There are many more datatypes you can use - `check the PostgreSQL manual!"
" <https://www.postgresql.org/docs/current/datatype.html>`_"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:116
msgid "Modelling an Address Database"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:118
msgid ""
"Let's use a simple case study to see how a database is constructed. We "
"want to create an address database."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:122
#: ../../docs/training_manual/database_concepts/db_intro.rst:189
msgid "|TY| |basic|"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:124
msgid ""
"Write down the properties which make up a simple address and which we "
"would want to store in our database."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:127
msgid ":ref:`Check your results <database-concepts-1>`"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:132
msgid "Address Structure"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:134
msgid ""
"The properties that describe an address are the columns. The type of "
"information stored in each column is its datatype. In the next section we"
" will analyse our conceptual address table to see how we can make it "
"better!"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:139
msgid "Database Theory"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:141
msgid ""
"The process of creating a database involves creating a model of the real "
"world; taking real world concepts and representing them in the database "
"as entities."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:145
msgid "Normalisation"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:147
msgid ""
"One of the main ideas in a database is to avoid data duplication / "
"redundancy. The process of removing redundancy from a database is called "
"Normalisation."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:150
msgid ""
"Normalization is a systematic way of ensuring that a database structure "
"is suitable for general-purpose querying and free of certain undesirable "
"characteristics - insertion, update, and deletion anomalies - that could "
"lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:155
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:157
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:184
msgid ""
"Imagine you have many friends with the same street name or city. Every "
"time this data is duplicated, it consumes space. Worse still, if a city "
"name changes, you have to do a lot of work to update your database."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:190
msgid ""
"Redesign the theoretical `people` table above to reduce duplication and "
"to normalise the data structure."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:193
msgid ""
"You can read more about database normalisation `here "
"<https://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:196
msgid ":ref:`Check your results <database-concepts-2>`"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:201
msgid "Indexes"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:203
msgid ""
"A database index is a data structure that improves the speed of data "
"retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:206
msgid ""
"Imagine you are reading a textbook and looking for the explanation of a "
"concept - and the textbook has no index! You will have to start reading "
"at one cover and work your way through the entire book until you find the"
" information you need. The index at the back of a book helps you to jump "
"quickly to the page with the relevant information:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:216
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:235
msgid "Sequences"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:237
msgid ""
"A sequence is a unique number generator. It is normally used to create a "
"unique identifier for a column in a table."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:240
msgid ""
"In this example, id is a sequence - the number is incremented each time a"
" record is added to the table:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:251
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:253
msgid ""
"In a normalised database, you typically have many relations (tables). The"
" entity-relationship diagram (ER Diagram) is used to design the logical "
"dependencies between the relations. Consider our non-normalised `people` "
"table from earlier in the lesson:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:268
msgid ""
"With a little work we can split it into two tables, removing the need to "
"repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:280
msgid "and:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:291
msgid ""
"We can then link the two tables using the 'keys' :kbd:`streets.id` and "
":kbd:`people.streets_id`."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:294
msgid ""
"If we draw an ER Diagram for these two tables it would look something "
"like this:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:300
msgid ""
"The ER Diagram helps us to express 'one to many' relationships. In this "
"case the arrow symbol show that one street can have many people living on"
" it."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:304
msgid "|TY| |moderate|"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:306
msgid ""
"Our `people` model still has some normalisation issues - try to see if "
"you can normalise it further and show your thoughts by means of an ER "
"Diagram."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:309
msgid ":ref:`Check your results <database-concepts-3>`"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:314
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:316
msgid ""
"A database constraint is used to ensure that data in a relation matches "
"the modeller's view of how that data should be stored. For example a "
"constraint on your postal code could ensure that the number falls between"
" :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:321
msgid ""
"A Primary key is one or more field values that make a record unique. "
"Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:324
msgid ""
"A Foreign key is used to refer to a unique record on another table (using"
" that other table's primary key)."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:327
msgid ""
"In ER Diagramming, the linkage between tables is normally based on "
"Foreign keys linking to Primary keys."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:330
msgid ""
"If we look at our people example, the table definition shows that the "
"street column is a foreign key that references the primary key on the "
"streets table:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:351
msgid "Transactions"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:353
msgid ""
"When adding, changing, or deleting data in a database, it is always "
"important that the database is left in a good state if something goes "
"wrong. Most databases provide a feature called transaction support. "
"Transactions allow you to create a rollback position that you can return "
"to if your modifications to the database did not run as planned."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:359
msgid ""
"Take a scenario where you have an accounting system. You need to transfer"
" funds from one account and add them to another. The sequence of steps "
"would go like this:"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:363
msgid "remove R20 from Joe"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:364
msgid "add R20 to Anne"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:366
msgid ""
"If something goes wrong during the process (e.g. power failure), the "
"transaction will be rolled back."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:370
msgid "|IC|"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:372
msgid ""
"Databases allow you to manage data in a structured way using simple code "
"structures."
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:376
msgid "|WN|"
msgstr ""

#: ../../docs/training_manual/database_concepts/db_intro.rst:378
msgid ""
"Now that we've looked at how databases work in theory, let's create a new"
" database to implement the theory we've covered."
msgstr ""

