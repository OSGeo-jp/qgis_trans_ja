# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation testing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-29 18:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:11
msgid ""
"The code snippets on this page need the following imports if you're "
"outside the pyqgis console:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:53
msgid "Using Vector Layers"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:58
msgid ""
"This section summarizes various actions that can be done with vector "
"layers."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:60
msgid ""
"Most work here is based on the methods of the :class:`QgsVectorLayer "
"<qgis.core.QgsVectorLayer>` class."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:66
msgid "Retrieving information about attributes"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:68
msgid ""
"You can retrieve information about the fields associated with a vector "
"layer by calling :meth:`fields() <qgis.core.QgsVectorLayer.fields>` on a "
":class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` object:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:86
msgid ""
"The :meth:`displayField() <qgis.core.QgsVectorLayer.displayField>` and "
":meth:`mapTipTemplate() <qgis.core.QgsVectorLayer.mapTipTemplate>` "
"methods of the :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` class "
"provide information on the field and template used in the :ref:`maptips` "
"tab."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:91
msgid ""
"When you load a vector layer, a field is always chosen by QGIS as the "
"``Display Name``, while the ``HTML Map Tip`` is empty by default. With "
"these methods you can easily get both:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:105
msgid ""
"If you change the ``Display Name`` from a field to an expression, you "
"have to use :meth:`displayExpression() "
"<qgis.core.QgsVectorLayer.displayExpression>` instead of "
":meth:`displayField() <qgis.core.QgsVectorLayer.displayField>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:112
msgid "Iterating over Vector Layer"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:114
msgid ""
"Iterating over the features in a vector layer is one of the most common "
"tasks. Below is an example of the simple basic code to perform this task "
"and showing some information about each feature. The ``layer`` variable "
"is assumed to have a :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` "
"object."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:173
msgid "Selecting features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:175
msgid ""
"In QGIS desktop, features can be selected in different ways: the user can"
" click on a feature, draw a rectangle on the map canvas or use an "
"expression filter. Selected features are normally highlighted in a "
"different color (default is yellow) to draw user's attention on the "
"selection."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:180
msgid ""
"Sometimes it can be useful to programmatically select features or to "
"change the default color."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:183
msgid ""
"To select all the features, the :meth:`selectAll() "
"<qgis.core.QgsVectorLayer.selectAll>` method can be used:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:191
msgid ""
"To select using an expression, use the :meth:`selectByExpression() "
"<qgis.core.QgsVectorLayer.selectByExpression>` method:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:200
msgid ""
"To change the selection color you can use :meth:`setSelectionColor() "
"<qgis.gui.QgsMapCanvas.setSelectionColor>` method of :class:`QgsMapCanvas"
" <qgis.gui.QgsMapCanvas>` as shown in the following example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:208
msgid ""
"To add features to the selected features list for a given layer, you can "
"call :meth:`select() <qgis.core.QgsVectorLayer.select>` passing to it the"
" list of features IDs:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:223
msgid "To clear the selection:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:230
msgid "Accessing attributes"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:232
msgid "Attributes can be referred to by their name:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:242
msgid ""
"Alternatively, attributes can be referred to by index. This is a bit "
"faster than using the name. For example, to get the second attribute:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:256
msgid "Iterating over selected features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:258
msgid ""
"If you only need selected features, you can use the "
":meth:`selectedFeatures() <qgis.core.QgsVectorLayer.selectedFeatures>` "
"method from the vector layer:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:270
msgid "Iterating over a subset of features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:272
msgid ""
"If you want to iterate over a given subset of features in a layer, such "
"as those within a given area, you have to add a :class:`QgsFeatureRequest"
" <qgis.core.QgsFeatureRequest>` object to the :meth:`getFeatures() "
"<qgis.core.QgsVectorLayer.getFeatures>` call. Here's an example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:286
msgid ""
"For the sake of speed, the intersection is often done only using "
"featureâ€™s bounding box. There is however a flag ``ExactIntersect`` that "
"makes sure that only intersecting features will be returned:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:295
msgid ""
"With :meth:`setLimit() <qgis.core.QgsFeatureRequest.setLimit>` you can "
"limit the number of requested features. Here's an example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:309
msgid ""
"If you need an attribute-based filter instead (or in addition) of a "
"spatial one like shown in the examples above, you can build a "
":class:`QgsExpression <qgis.core.QgsExpression>` object and pass it to "
"the :class:`QgsFeatureRequest <qgis.core.QgsFeatureRequest>` constructor."
" Here's an example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:322
msgid ""
"See :ref:`expressions` for the details about the syntax supported by "
":class:`QgsExpression <qgis.core.QgsExpression>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:324
msgid ""
"The request can be used to define the data retrieved for each feature, so"
" the iterator returns all features, but returns partial data for each of "
"them."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:349
msgid "Modifying Vector Layers"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:351
msgid ""
"Most vector data providers support editing of layer data. Sometimes they "
"support just a subset of possible editing actions. Use the "
":meth:`capabilities() <qgis.core.QgsVectorDataProvider.capabilities>` "
"function to find out what set of functionality is supported."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:367
msgid ""
"For a list of all available capabilities, please refer to the :class:`API"
" Documentation of QgsVectorDataProvider "
"<qgis.core.QgsVectorDataProvider>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:371
msgid ""
"To print layer's capabilities textual description in a comma separated "
"list you can use :meth:`capabilitiesString() "
"<qgis.core.QgsVectorDataProvider.capabilitiesString>` as in the following"
" example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:384
msgid ""
"By using any of the following methods for vector layer editing, the "
"changes are directly committed to the underlying data store (a file, "
"database etc). In case you would like to do only temporary changes, skip "
"to the next section that explains how to do :ref:`modifications with "
"editing buffer <editing-buffer>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:392
msgid ""
"If you are working inside QGIS (either from the console or from a "
"plugin), it might be necessary to force a redraw of the map canvas in "
"order to see the changes you've done to the geometry, to the style or to "
"the attributes:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:407
msgid "Add Features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:409
msgid ""
"Create some :class:`QgsFeature <qgis.core.QgsFeature>` instances and pass"
" a list of them to provider's :meth:`addFeatures() "
"<qgis.core.QgsVectorDataProvider.addFeatures>` method. It will return two"
" values: result (true/false) and list of added features (their ID is set "
"by the data store)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:413
msgid ""
"To set up the attributes of the feature, you can either initialize the "
"feature passing a :class:`QgsFields <qgis.core.QgsFields>` object (you "
"can obtain that from the :meth:`fields() "
"<qgis.core.QgsVectorLayer.fields>` method of the vector layer) or call "
":meth:`initAttributes() <qgis.core.QgsFeature.initAttributes>` passing "
"the number of fields you want to be added."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:432
msgid "Delete Features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:434
msgid "To delete some features, just provide a list of their feature IDs."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:442
msgid "Modify Features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:444
msgid ""
"It is possible to either change feature's geometry or to change some "
"attributes. The following example first changes values of attributes with"
" index 0 and 1, then it changes the feature's geometry."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:461
msgid "**Favor QgsVectorLayerEditUtils class for geometry-only edits**"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:463
msgid ""
"If you only need to change geometries, you might consider using the "
":class:`QgsVectorLayerEditUtils <qgis.core.QgsVectorLayerEditUtils>` "
"which provides some useful methods to edit geometries (translate, insert "
"or move vertex, etc.)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:470
msgid "Modifying Vector Layers with an Editing Buffer"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:472
msgid ""
"When editing vectors within QGIS application, you have to first start "
"editing mode for a particular layer, then do some modifications and "
"finally commit (or rollback) the changes. All the changes you make are "
"not written until you commit them --- they stay in layer's in-memory "
"editing buffer. It is possible to use this functionality also "
"programmatically --- it is just another method for vector layer editing "
"that complements the direct usage of data providers. Use this option when"
" providing some GUI tools for vector layer editing, since this will allow"
" user to decide whether to commit/rollback and allows the usage of "
"undo/redo. When changes are committed, all changes from the editing "
"buffer are saved to data provider."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:483
msgid ""
"The methods are similar to the ones we have seen in the provider, but "
"they are called on the :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>`"
" object instead."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:487
msgid ""
"For these methods to work, the layer must be in editing mode. To start "
"the editing mode, use the :meth:`startEditing() "
"<qgis.core.QgsVectorLayer.startEditing>` method. To stop editing, use the"
" :meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` or "
":meth:`rollBack() <qgis.core.QgsVectorLayer.rollBack>` methods. The first"
" one will commit all your changes to the data source, while the second "
"one will discard them and will not modify the data source at all."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:494
msgid ""
"To find out whether a layer is in editing mode, use the "
":meth:`isEditable() <qgis.core.QgsVectorLayer.isEditable>` method."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:497
msgid ""
"Here you have some examples that demonstrate how to use these editing "
"methods."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:525
msgid ""
"In order to make undo/redo work properly, the above mentioned calls have "
"to be wrapped into undo commands. (If you do not care about undo/redo and"
" want to have the changes stored immediately, then you will have easier "
"work by :ref:`editing with data provider <editing>`.)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:530
msgid "Here is how you can use the undo functionality:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:547
msgid ""
"The :meth:`beginEditCommand() "
"<qgis.core.QgsVectorLayer.beginEditCommand>` method will create an "
"internal \"active\" command and will record subsequent changes in vector "
"layer. With the call to :meth:`endEditCommand() "
"<qgis.core.QgsVectorLayer.endEditCommand>` the command is pushed onto the"
" undo stack and the user will be able to undo/redo it from GUI. In case "
"something went wrong while doing the changes, the "
":meth:`destroyEditCommand() "
"<qgis.core.QgsVectorLayer.destroyEditCommand>` method will remove the "
"command and rollback all changes done while this command was active."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:554
msgid ""
"You can also use the :code:`with edit(layer)`-statement to wrap commit "
"and rollback into a more semantic code block as shown in the example "
"below:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:565
msgid ""
"This will automatically call :meth:`commitChanges() "
"<qgis.core.QgsVectorLayer.commitChanges>` in the end. If any exception "
"occurs, it will :meth:`rollBack() <qgis.core.QgsVectorLayer.rollBack>` "
"all the changes. In case a problem is encountered within "
":meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` (when "
"the method returns False) a :class:`QgsEditError "
"<qgis.core.QgsEditError>` exception will be raised."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:571
msgid "Adding and Removing Fields"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:573
msgid ""
"To add fields (attributes), you need to specify a list of field "
"definitions. For deletion of fields just provide a list of field indexes."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:604
msgid ""
"After adding or removing fields in the data provider the layer's fields "
"need to be updated because the changes are not automatically propagated."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:611
msgid "**Directly save changes using** ``with`` **based command**"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:613
msgid ""
"Using ``with edit(layer):`` the changes will be committed automatically "
"calling :meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` "
"at the end. If any exception occurs, it will :meth:`rollBack() "
"<qgis.core.QgsVectorLayer.rollBack>` all the changes. See :ref:`editing-"
"buffer`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:621
msgid "Using Spatial Index"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:623
msgid ""
"Spatial indexes can dramatically improve the performance of your code if "
"you need to do frequent queries to a vector layer. Imagine, for instance,"
" that you are writing an interpolation algorithm, and that for a given "
"location you need to know the 10 closest points from a points layer, in "
"order to use those point for calculating the interpolated value. Without "
"a spatial index, the only way for QGIS to find those 10 points is to "
"compute the distance from each and every point to the specified location "
"and then compare those distances. This can be a very time consuming task,"
" especially if it needs to be repeated for several locations. If a "
"spatial index exists for the layer, the operation is much more effective."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:634
msgid ""
"Think of a layer without a spatial index as a telephone book in which "
"telephone numbers are not ordered or indexed. The only way to find the "
"telephone number of a given person is to read from the beginning until "
"you find it."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:638
msgid ""
"Spatial indexes are not created by default for a QGIS vector layer, but "
"you can create them easily. This is what you have to do:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:641
msgid ""
"create spatial index using the :class:`QgsSpatialIndex() "
"<qgis.core.QgsSpatialIndex>` class:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:648
msgid ""
"add features to index --- index takes :class:`QgsFeature "
"<qgis.core.QgsFeature>` object and adds it to the internal data "
"structure. You can create the object manually or use one from a previous "
"call to the provider's :meth:`getFeatures() "
"<qgis.core.QgsVectorDataProvider.getFeatures>` method."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:657
msgid ""
"alternatively, you can load all features of a layer at once using bulk "
"loading"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:663
msgid "once spatial index is filled with some values, you can do some queries"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:677
msgid "Creating Vector Layers"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:679
msgid "There are several ways to generate a vector layer dataset:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:681
msgid ""
"the :class:`QgsVectorFileWriter <qgis.core.QgsVectorFileWriter>` class: A"
" convenient class for writing vector files to disk, using either a static"
" call to :meth:`writeAsVectorFormat() "
"<qgis.core.QgsVectorFileWriter.writeAsVectorFormat>` which saves the "
"whole vector layer or creating an instance of the class and issue calls "
"to :meth:`addFeature() <qgis.core.QgsVectorFileWriter.addFeature>`. This "
"class supports all the vector formats that OGR supports (GeoPackage, "
"Shapefile, GeoJSON, KML and others)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:689
msgid ""
"the :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` class: "
"instantiates a data provider that interprets the supplied path (url) of "
"the data source to connect to and access the data. It can be used to "
"create temporary, memory-based layers (``memory``) and connect to OGR "
"datasets (``ogr``), databases (``postgres``, ``spatialite``, ``mysql``, "
"``mssql``) and more (``wfs``, ``gpx``, ``delimitedtext``...)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:698
msgid ""
"From an instance of :class:`QgsVectorFileWriter "
"<qgis.core.QgsVectorFileWriter>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:763
msgid ""
"You can also convert fields to make them compatible with different "
"formats by using the  :class:`FieldValueConverter "
"<qgis.core.QgsVectorFileWriter.FieldValueConverter>`. For example, to "
"convert array variable types (e.g. in Postgres) to a text type, you can "
"do the following:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:800
msgid ""
"A destination CRS may also be specified --- if a valid instance of "
":class:`QgsCoordinateReferenceSystem "
"<qgis.core.QgsCoordinateReferenceSystem>` is passed as the fourth "
"parameter, the layer is transformed to that CRS."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:804
msgid ""
"For valid driver names please call the :meth:`supportedFiltersAndFormats "
"<qgis.core.QgsVectorFileWriter.supportedFiltersAndFormats>` method or "
"consult the `supported formats by OGR`_ --- you should pass the value in "
"the \"Code\" column as the driver name."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:809
msgid ""
"Optionally you can set whether to export only selected features, pass "
"further driver-specific options for creation or tell the writer not to "
"create attributes... There are a number of other (optional) parameters; "
"see the :class:`QgsVectorFileWriter <qgis.core.QgsVectorFileWriter>` "
"documentation for details."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:816
msgid "Directly from features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:869
msgid "From an instance of :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:871
msgid ""
"Among all the data providers supported by the :class:`QgsVectorLayer "
"<qgis.core.QgsVectorLayer>` class, let's focus on the memory-based "
"layers. Memory provider is intended to be used mainly by plugin or 3rd "
"party app developers. It does not store data on disk, allowing developers"
" to use it as a fast backend for some temporary layers."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:877
msgid "The provider supports string, int and double fields."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:879
msgid ""
"The memory provider also supports spatial indexing, which is enabled by "
"calling the provider's :meth:`createSpatialIndex() "
"<qgis.core.QgsVectorDataProvider.createSpatialIndex>` function. Once the "
"spatial index is created you will be able to iterate over features within"
" smaller regions faster (since it's not necessary to traverse all the "
"features, only those in specified rectangle)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:886
msgid ""
"A memory provider is created by passing ``\"memory\"`` as the provider "
"string to the :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` "
"constructor."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:889
msgid ""
"The constructor also takes a URI defining the geometry type of the layer,"
" one of: ``\"Point\"``, ``\"LineString\"``, ``\"Polygon\"``, "
"``\"MultiPoint\"``, ``\"MultiLineString\"``, ``\"MultiPolygon\"`` or "
"``\"None\"``."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:893
msgid ""
"The URI can also specify the coordinate reference system, fields, and "
"indexing of the memory provider in the URI. The syntax is:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:899
msgid "crs=definition"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:897
msgid ""
"Specifies the coordinate reference system, where definition may be any of"
" the forms accepted by "
":meth:`QgsCoordinateReferenceSystem.createFromString "
"<qgis.core.QgsCoordinateReferenceSystem.createFromString>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:902
msgid "index=yes"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:902
msgid "Specifies that the provider will use a spatial index"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:907
msgid "field=name:type(length,precision)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:905
msgid ""
"Specifies an attribute of the layer.  The attribute has a name, and "
"optionally a type (integer, double, or string), length, and precision. "
"There may be multiple field definitions."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:909
msgid "The following example of a URI incorporates all these options"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:915
msgid ""
"The following example code illustrates creating and populating a memory "
"provider"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:941
msgid "Finally, let's check whether everything went well"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:966
msgid "Appearance (Symbology) of Vector Layers"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:968
msgid ""
"When a vector layer is being rendered, the appearance of the data is "
"given by **renderer** and **symbols** associated with the layer.  Symbols"
" are classes which take care of drawing of visual representation of "
"features, while renderers determine what symbol will be used for a "
"particular feature."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:973
msgid "The renderer for a given layer can be obtained as shown below:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:979
msgid "And with that reference, let us explore it a bit"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:989
msgid "There are several known renderer types available in the QGIS core library:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:992
msgid "Type"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:992
msgid "Class"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:992
msgid "Description"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:994
msgid "singleSymbol"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:994
msgid ":class:`QgsSingleSymbolRenderer <qgis.core.QgsSingleSymbolRenderer>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:994
msgid "Renders all features with the same symbol"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:995
msgid "categorizedSymbol"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:995
msgid ""
":class:`QgsCategorizedSymbolRenderer "
"<qgis.core.QgsCategorizedSymbolRenderer>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:995
msgid "Renders features using a different symbol for each category"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:996
msgid "graduatedSymbol"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:996
msgid ""
":class:`QgsGraduatedSymbolRenderer  "
"<qgis.core.QgsGraduatedSymbolRenderer>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:996
msgid "Renders features using a different symbol for each range of values"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:999
msgid ""
"There might be also some custom renderer types, so never make an "
"assumption there are just these types. You can query the application's "
":class:`QgsRendererRegistry <qgis.core.QgsRendererRegistry>` to find out "
"currently available renderers:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1011
msgid ""
"It is possible to obtain a dump of a renderer contents in text form --- "
"can be useful for debugging"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1025
msgid "Single Symbol Renderer"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1027
msgid ""
"You can get the symbol used for rendering by calling :meth:`symbol() "
"<qgis.core.QgsSingleSymbolRenderer.symbol>` method and change it with "
":meth:`setSymbol() <qgis.core.QgsSingleSymbolRenderer.setSymbol>` method "
"(note for C++ devs: the renderer takes ownership of the symbol.)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1031
msgid ""
"You can change the symbol used by a particular vector layer by calling "
":meth:`setSymbol() <qgis.core.QgsSingleSymbolRenderer.setSymbol>` passing"
" an instance of the appropriate symbol instance. Symbols for *point*, "
"*line* and *polygon* layers can be created by calling the "
":meth:`createSimple() <qgis.core.QgsMarkerSymbol.createSimple>` function "
"of the corresponding classes :class:`QgsMarkerSymbol "
"<qgis.core.QgsMarkerSymbol>`, :class:`QgsLineSymbol "
"<qgis.core.QgsLineSymbol>` and :class:`QgsFillSymbol "
"<qgis.core.QgsFillSymbol>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1038
msgid ""
"The dictionary passed to :meth:`createSimple() "
"<qgis.core.QgsMarkerSymbol.createSimple>` sets the style properties of "
"the symbol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1041
msgid ""
"For example you can replace the symbol used by a particular **point** "
"layer by calling :meth:`setSymbol() "
"<qgis.core.QgsSingleSymbolRenderer.setSymbol>` passing an instance of a "
":class:`QgsMarkerSymbol <qgis.core.QgsMarkerSymbol>`, as in the following"
" code example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1052
msgid ""
"``name`` indicates the shape of the marker, and can be any of the "
"following:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1054
msgid "``circle``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1055
msgid "``square``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1056
msgid "``cross``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1057
msgid "``rectangle``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1058
msgid "``diamond``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1059
msgid "``pentagon``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1060
msgid "``triangle``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1061
msgid "``equilateral_triangle``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1062
msgid "``star``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1063
msgid "``regular_star``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1064
msgid "``arrow``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1065
msgid "``filled_arrowhead``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1066
msgid "``x``"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1069
msgid ""
"To get the full list of properties for the first symbol layer of a symbol"
" instance you can follow the example code:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1080
msgid "This can be useful if you want to alter some properties:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1099
msgid "Categorized Symbol Renderer"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1101
msgid ""
"When using a categorized renderer, you can query and set the attribute "
"that is used for classification: use the :meth:`classAttribute() "
"<qgis.core.QgsCategorizedSymbolRenderer.classAttribute>` and "
":meth:`setClassAttribute() "
"<qgis.core.QgsCategorizedSymbolRenderer.setClassAttribute>` methods."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1104
msgid "To get a list of categories"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1125
msgid ""
"Where :meth:`value() <qgis.core.QgsRendererCategory.value>` is the value "
"used for discrimination between categories, :meth:`label() "
"<qgis.core.QgsRendererCategory.label>` is a text used for category "
"description and :meth:`symbol() <qgis.core.QgsRendererCategory.symbol>` "
"method returns the assigned symbol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1129
msgid ""
"The renderer usually stores also original symbol and color ramp which "
"were used for the classification: :meth:`sourceColorRamp() "
"<qgis.core.QgsCategorizedSymbolRenderer.sourceColorRamp>` and "
":meth:`sourceSymbol() "
"<qgis.core.QgsCategorizedSymbolRenderer.sourceSymbol>` methods."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1135
msgid "Graduated Symbol Renderer"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1137
msgid ""
"This renderer is very similar to the categorized symbol renderer "
"described above, but instead of one attribute value per class it works "
"with ranges of values and thus can be used only with numerical "
"attributes."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1141
msgid "To find out more about ranges used in the renderer"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1164
msgid ""
"you can again use the :meth:`classAttribute "
"<qgis.core.QgsGraduatedSymbolRenderer.classAttribute>` (to find the "
"classification attribute name), :meth:`sourceSymbol "
"<qgis.core.QgsGraduatedSymbolRenderer.sourceSymbol>` and "
":meth:`sourceColorRamp "
"<qgis.core.QgsGraduatedSymbolRenderer.sourceColorRamp>` methods. "
"Additionally there is the :meth:`mode "
"<qgis.core.QgsGraduatedSymbolRenderer.mode>` method which determines how "
"the ranges were created: using equal intervals, quantiles or some other "
"method."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1173
msgid ""
"If you wish to create your own graduated symbol renderer you can do so as"
" illustrated in the example snippet below (which creates a simple two "
"class arrangement)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1217
msgid "Working with Symbols"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1219
msgid ""
"For representation of symbols, there is :class:`QgsSymbol "
"<qgis.core.QgsSymbol>` base class with three derived classes:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1222
msgid ""
":class:`QgsMarkerSymbol <qgis.core.QgsMarkerSymbol>` --- for point "
"features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1223
msgid ":class:`QgsLineSymbol <qgis.core.QgsLineSymbol>` --- for line features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1224
msgid ":class:`QgsFillSymbol <qgis.core.QgsFillSymbol>` --- for polygon features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1226
msgid ""
"**Every symbol consists of one or more symbol layers** (classes derived "
"from :class:`QgsSymbolLayer <qgis.core.QgsSymbolLayer>`). The symbol "
"layers do the actual rendering, the symbol class itself serves only as a "
"container for the symbol layers."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1230
msgid ""
"Having an instance of a symbol (e.g. from a renderer), it is possible to "
"explore it: the :meth:`type <qgis.core.QgsSymbol.type>` method says "
"whether it is a marker, line or fill symbol. There is a :meth:`dump "
"<qgis.core.QgsSymbol.dump>` method which returns a brief description of "
"the symbol. To get a list of symbol layers:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1247
msgid ""
"To find out symbol's color use :meth:`color <qgis.core.QgsSymbol.color>` "
"method and :meth:`setColor <qgis.core.QgsSymbol.setColor>` to change its "
"color. With marker symbols additionally you can query for the symbol size"
" and rotation with the :meth:`size <qgis.core.QgsMarkerSymbol.size>` and "
":meth:`angle <qgis.core.QgsMarkerSymbol.angle>` methods. For line symbols"
" the :meth:`width <qgis.core.QgsLineSymbol.width>` method returns the "
"line width."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1252
msgid "Size and width are in millimeters by default, angles are in degrees."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1257
msgid "Working with Symbol Layers"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1259
msgid ""
"As said before, symbol layers (subclasses of :class:`QgsSymbolLayer "
"<qgis.core.QgsSymbolLayer>`) determine the appearance of the features.  "
"There are several basic symbol layer classes for general use. It is "
"possible to implement new symbol layer types and thus arbitrarily "
"customize how features will be rendered. The :meth:`layerType() "
"<qgis.core.QgsSymbolLayer.layerType>` method uniquely identifies the "
"symbol layer class --- the basic and default ones are ``SimpleMarker``, "
"``SimpleLine`` and ``SimpleFill`` symbol layers types."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1266
msgid ""
"You can get a complete list of the types of symbol layers you can create "
"for a given symbol layer class with the following code:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1289
msgid ""
"The :class:`QgsSymbolLayerRegistry <qgis.core.QgsSymbolLayerRegistry>` "
"class manages a database of all available symbol layer types."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1292
msgid ""
"To access symbol layer data, use its :meth:`properties() "
"<qgis.core.QgsSymbolLayer.properties>` method that returns a key-value "
"dictionary of properties which determine the appearance. Each symbol "
"layer type has a specific set of properties that it uses. Additionally, "
"there are the generic methods :meth:`color <qgis.core.QgsSymbol.color>`, "
":meth:`size <qgis.core.QgsMarkerSymbol.size>`, :meth:`angle "
"<qgis.core.QgsMarkerSymbol.angle>` and :meth:`width "
"<qgis.core.QgsLineSymbol.width>`, with their setter counterparts. Of "
"course size and angle are available only for marker symbol layers and "
"width for line symbol layers."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1304
msgid "Creating Custom Symbol Layer Types"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1306
msgid ""
"Imagine you would like to customize the way how the data gets rendered. "
"You can create your own symbol layer class that will draw the features "
"exactly as you wish. Here is an example of a marker that draws red "
"circles with specified radius"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1346
msgid ""
"The :meth:`layerType <qgis.core.QgsSymbolLayer.layerType>` method "
"determines the name of the symbol layer; it has to be unique among all "
"symbol layers. The :meth:`properties "
"<qgis.core.QgsSymbolLayer.properties>` method is used for persistence of "
"attributes. The :meth:`clone <qgis.core.QgsSymbolLayer.clone>` method "
"must return a copy of the symbol layer with all attributes being exactly "
"the same. Finally there are rendering methods: :meth:`startRender "
"<qgis.core.QgsSymbolLayer.startRender>` is called before rendering the "
"first feature, :meth:`stopRender <qgis.core.QgsSymbolLayer.stopRender>` "
"when the rendering is done, and :meth:`renderPoint "
"<qgis.core.QgsMarkerSymbolLayer.renderPoint>` is called to do the "
"rendering. The coordinates of the point(s) are already transformed to the"
" output coordinates."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1358
msgid ""
"For polylines and polygons the only difference would be in the rendering "
"method: you would use :meth:`renderPolyline "
"<qgis.core.QgsLineSymbolLayer.renderPolyline>` which receives a list of "
"lines, while :meth:`renderPolygon "
"<qgis.core.QgsFillSymbolLayer.renderPolygon>` receives a list of points "
"on the outer ring as the first parameter and a list of inner rings (or "
"None) as a second parameter."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1366
msgid ""
"Usually it is convenient to add a GUI for setting attributes of the "
"symbol layer type to allow users to customize the appearance: in case of "
"our example above we can let user set circle radius. The following code "
"implements such widget"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1404
msgid ""
"This widget can be embedded into the symbol properties dialog. When the "
"symbol layer type is selected in symbol properties dialog, it creates an "
"instance of the symbol layer and an instance of the symbol layer widget. "
"Then it calls the :meth:`setSymbolLayer "
"<qgis.gui.QgsSymbolLayerWidget.setSymbolLayer>` method to assign the "
"symbol layer to the widget. In that method the widget should update the "
"UI to reflect the attributes of the symbol layer. The :meth:`symbolLayer "
"<qgis.gui.QgsSymbolLayerWidget.symbolLayer>` method is used to retrieve "
"the symbol layer again by the properties dialog to use it for the symbol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1414
msgid ""
"On every change of attributes, the widget should emit the :any:`changed()"
" <qgis.gui.QgsSymbolLayerWidget.changed>` signal to let the properties "
"dialog update the symbol preview."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1418
msgid ""
"Now we are missing only the final glue: to make QGIS aware of these new "
"classes. This is done by adding the symbol layer to registry. It is "
"possible to use the symbol layer also without adding it to the registry, "
"but some functionality will not work: e.g. loading of project files with "
"the custom symbol layers or inability to edit the layer's attributes in "
"GUI."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1424
msgid "We will have to create metadata for the symbol layer"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1445
msgid ""
"You should pass layer type (the same as returned by the layer) and symbol"
" type (marker/line/fill) to the constructor of the parent class. The "
":meth:`createSymbolLayer() "
"<qgis.core.QgsSymbolLayerAbstractMetadata.createSymbolLayer>` method "
"takes care of creating an instance of symbol layer with attributes "
"specified in the `props` dictionary. And there is the "
":meth:`createSymbolLayerWidget() "
"<qgis.core.QgsSymbolLayerAbstractMetadata.createSymbolLayerWidget>` "
"method which returns the settings widget for this symbol layer type."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1453
msgid ""
"The last step is to add this symbol layer to the registry --- and we are "
"done."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1459
msgid "Creating Custom Renderers"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1461
msgid ""
"It might be useful to create a new renderer implementation if you would "
"like to customize the rules how to select symbols for rendering of "
"features. Some use cases where you would want to do it: symbol is "
"determined from a combination of fields, size of symbols changes "
"depending on current scale etc."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1466
msgid ""
"The following code shows a simple custom renderer that creates two marker"
" symbols and chooses randomly one of them for every feature"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1502
msgid ""
"The constructor of the parent :class:`QgsFeatureRenderer "
"<qgis.core.QgsFeatureRenderer>` class needs a renderer name (which has to"
" be unique among renderers). The :meth:`symbolForFeature "
"<qgis.core.QgsFeatureRenderer.symbolForFeature>` method is the one that "
"decides what symbol will be used for a particular feature. "
":meth:`startRender <qgis.core.QgsFeatureRenderer.startRender>` and "
":meth:`stopRender <qgis.core.QgsFeatureRenderer.stopRender>` take care of"
" initialization/finalization of symbol rendering. The "
":meth:`usedAttributes <qgis.core.QgsFeatureRenderer.usedAttributes>` "
"method can return a list of field names that the renderer expects to be "
"present. Finally, the :meth:`clone <qgis.core.QgsFeatureRenderer.clone>` "
"method should return a copy of the renderer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1513
msgid ""
"Like with symbol layers, it is possible to attach a GUI for configuration"
" of the renderer. It has to be derived from :class:`QgsRendererWidget "
"<qgis.gui.QgsRendererWidget>`. The following sample code creates a button"
" that allows the user to set the first symbol"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1547
msgid ""
"The constructor receives instances of the active layer "
"(:class:`QgsVectorLayer <qgis.core.QgsVectorLayer>`), the global style "
"(:class:`QgsStyle <qgis.core.QgsStyle>`) and the current renderer. If "
"there is no renderer or the renderer has different type, it will be "
"replaced with our new renderer, otherwise we will use the current "
"renderer (which has already the type we need). The widget contents should"
" be updated to show current state of the renderer. When the renderer "
"dialog is accepted, the widget's :meth:`renderer "
"<qgis.gui.QgsRendererWidget.renderer>` method is called to get the "
"current renderer --- it will be assigned to the layer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1557
msgid ""
"The last missing bit is the renderer metadata and registration in "
"registry, otherwise loading of layers with the renderer will not work and"
" user will not be able to select it from the list of renderers. Let us "
"finish our RandomRenderer example"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1587
msgid ""
"Similarly as with symbol layers, abstract metadata constructor awaits "
"renderer name, name visible for users and optionally name of renderer's "
"icon. The :meth:`createRenderer "
"<qgis.core.QgsRendererAbstractMetadata.createRenderer>` method passes a "
":class:`QDomElement` instance that can be used to restore the renderer's "
"state from the DOM tree. The :meth:`createRendererWidget "
"<qgis.core.QgsRendererAbstractMetadata.createRendererWidget>` method "
"creates the configuration widget. It does not have to be present or can "
"return ``None`` if the renderer does not come with GUI."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1596
msgid ""
"To associate an icon with the renderer you can assign it in the "
":class:`QgsRendererAbstractMetadata "
"<qgis.core.QgsRendererAbstractMetadata>` constructor as a third "
"(optional) argument --- the base class constructor in the "
"RandomRendererMetadata :func:`__init__` function becomes"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1610
msgid ""
"The icon can also be associated at any later time using the "
":meth:`setIcon <qgis.core.QgsRendererAbstractMetadata.setIcon>` method of"
" the metadata class. The icon can be loaded from a file (as shown above) "
"or can be loaded from a `Qt resource "
"<https://doc.qt.io/qt-5/resources.html>`_ (PyQt5 includes .qrc compiler "
"for Python)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1618
msgid "Further Topics"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1621
msgid "**TODO:**"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1623
msgid "creating/modifying symbols"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1624
msgid "working with style (:class:`QgsStyle <qgis.core.QgsStyle>`)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1625
msgid "working with color ramps (:class:`QgsColorRamp <qgis.core.QgsColorRamp>`)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1626
msgid "exploring symbol layer and renderer registries"
msgstr ""

