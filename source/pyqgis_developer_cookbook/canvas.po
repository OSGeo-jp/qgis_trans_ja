# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation testing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-29 18:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:11
msgid ""
"The code snippets on this page need the following imports if you're "
"outside the pyqgis console:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:42
msgid "Using the Map Canvas"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:48
msgid ""
"The Map canvas widget is probably the most important widget within QGIS "
"because it shows the map composed from overlaid map layers and allows "
"interaction with the map and layers. The canvas always shows a part of "
"the map defined by the current canvas extent. The interaction is done "
"through the use of **map tools**: there are tools for panning, zooming, "
"identifying layers, measuring, vector editing and others. Similar to "
"other graphics programs, there is always one tool active and the user can"
" switch between the available tools."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:56
msgid ""
"The map canvas is implemented with the :class:`QgsMapCanvas "
"<qgis.gui.QgsMapCanvas>` class in the :mod:`qgis.gui` module. The "
"implementation is based on the Qt Graphics View framework. This framework"
" generally provides a surface and a view where custom graphics items are "
"placed and user can interact with them.  We will assume that you are "
"familiar enough with Qt to understand the concepts of the graphics scene,"
" view and items. If not, please read the `overview of the framework "
"<https://doc.qt.io/qt-5/graphicsview.html>`_."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:64
msgid ""
"Whenever the map has been panned, zoomed in/out (or some other action "
"that triggers a refresh), the map is rendered again within the current "
"extent. The layers are rendered to an image (using the "
":class:`QgsMapRendererJob <qgis.core.QgsMapRendererJob>` class) and that "
"image is displayed on the canvas. The :class:`QgsMapCanvas "
"<qgis.gui.QgsMapCanvas>` class also controls refreshing of the rendered "
"map. Besides this item which acts as a background, there may be more "
"**map canvas items**."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:70
msgid ""
"Typical map canvas items are rubber bands (used for measuring, vector "
"editing etc.) or vertex markers. The canvas items are usually used to "
"give visual feedback for map tools, for example, when creating a new "
"polygon, the map tool creates a rubber band canvas item that shows the "
"current shape of the polygon. All map canvas items are subclasses of "
":class:`QgsMapCanvasItem <qgis.gui.QgsMapCanvasItem>`  which adds some "
"more functionality to the basic ``QGraphicsItem`` objects."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:79
msgid "To summarize, the map canvas architecture consists of three concepts:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:81
msgid "map canvas --- for viewing of the map"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:82
msgid ""
"map canvas items --- additional items that can be displayed on the map "
"canvas"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:83
msgid "map tools --- for interaction with the map canvas"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:88
msgid "Embedding Map Canvas"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:90
msgid ""
"Map canvas is a widget like any other Qt widget, so using it is as simple"
" as creating and showing it."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:98
msgid ""
"This produces a standalone window with map canvas. It can be also "
"embedded into an existing widget or window. When using :file:`.ui` files "
"and Qt Designer, place a ``QWidget`` on the form and promote it to a new "
"class: set ``QgsMapCanvas`` as class name and set ``qgis.gui`` as header "
"file. The ``pyuic5`` utility will take care of it. This is a very "
"convenient way of embedding the canvas. The other possibility is to "
"manually write the code to construct map canvas and other widgets (as "
"children of a main window or dialog) and create a layout."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:106
msgid ""
"By default, map canvas has black background and does not use anti-"
"aliasing. To set white background and enable anti-aliasing for smooth "
"rendering"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:114
msgid ""
"(In case you are wondering, ``Qt`` comes from ``PyQt.QtCore`` module and "
"``Qt.white`` is one of the predefined ``QColor`` instances.)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:117
msgid ""
"Now it is time to add some map layers. We will first open a layer and add"
" it to the current project. Then we will set the canvas extent and set "
"the list of layers for the canvas."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:137
msgid ""
"After executing these commands, the canvas should show the layer you have"
" loaded."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:143
msgid "Rubber Bands and Vertex Markers"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:145
msgid ""
"To show some additional data on top of the map in canvas, use map canvas "
"items. It is possible to create custom canvas item classes (covered "
"below), however there are two useful canvas item classes for convenience:"
" :class:`QgsRubberBand <qgis.gui.QgsRubberBand>` for drawing polylines or"
" polygons, and :class:`QgsVertexMarker <qgis.gui.QgsVertexMarker>` for "
"drawing points. They both work with map coordinates, so the shape is "
"moved/scaled automatically when the canvas is being panned or zoomed."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:153
msgid "To show a polyline:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:161
msgid "To show a polygon"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:169
msgid ""
"Note that points for polygon is not a plain list: in fact, it is a list "
"of rings containing linear rings of the polygon: first ring is the outer "
"border, further (optional) rings correspond to holes in the polygon."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:173
msgid ""
"Rubber bands allow some customization, namely to change their color and "
"line width"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:181
msgid ""
"The canvas items are bound to the canvas scene. To temporarily hide them "
"(and show them again), use the :func:`hide` and :func:`show` combo. To "
"completely remove the item, you have to remove it from the scene of the "
"canvas"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:189
msgid ""
"(in C++ it's possible to just delete the item, however in Python ``del "
"r`` would just delete the reference and the object will still exist as it"
" is owned by the canvas)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:193
msgid ""
"Rubber band can be also used for drawing points, but the "
":class:`QgsVertexMarker <qgis.gui.QgsVertexMarker>` class is better "
"suited for this (:class:`QgsRubberBand <qgis.gui.QgsRubberBand>` would "
"only draw a rectangle around the desired point)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:197
msgid "You can use the vertex marker like this:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:204
msgid ""
"This will draw a red cross on position **[10,45]**. It is possible to "
"customize the icon type, size, color and pen width"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:214
msgid ""
"For temporary hiding of vertex markers and removing them from canvas, use"
" the same methods as for rubber bands."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:220
msgid "Using Map Tools with Canvas"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:222
msgid ""
"The following example constructs a window that contains a map canvas and "
"basic map tools for map panning and zooming. Actions are created for "
"activation of each tool: panning is done with :class:`QgsMapToolPan "
"<qgis.gui.QgsMapToolPan>`, zooming in/out with a pair of "
":class:`QgsMapToolZoom <qgis.gui.QgsMapToolZoom>` instances. The actions "
"are set as checkable and later assigned to the tools to allow automatic "
"handling of checked/unchecked state of the actions -- when a map tool "
"gets activated, its action is marked as selected and the action of the "
"previous map tool is deselected. The map tools are activated using "
":meth:`setMapTool() <qgis.gui.QgsMapCanvas.setMapTool>` method."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:286
msgid ""
"You can try the above code in the Python console editor. To invoke the "
"canvas window, add the following lines to instantiate the ``MyWnd`` "
"class. They will render the currently selected layer on the newly created"
" canvas"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:298
msgid "Writing Custom Map Tools"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:300
msgid ""
"You can write your custom tools, to implement a custom behavior to "
"actions performed by users on the canvas."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:303
msgid ""
"Map tools should inherit from the :class:`QgsMapTool "
"<qgis.gui.QgsMapTool>`, class or any derived class, and selected as "
"active tools in the canvas using the :meth:`setMapTool() "
"<qgis.gui.QgsMapCanvas.setMapTool>` method as we have already seen."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:308
msgid ""
"Here is an example of a map tool that allows to define a rectangular "
"extent by clicking and dragging on the canvas. When the rectangle is "
"defined, it prints its boundary coordinates in the console. It uses the "
"rubber band elements described before to show the selected rectangle as "
"it is being defined."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:382
msgid "Writing Custom Map Canvas Items"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/canvas.rst:384
msgid "Here is an example of a custom canvas item that draws a circle:"
msgstr ""

